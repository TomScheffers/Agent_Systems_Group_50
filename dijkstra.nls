
to-report init-connectivity-matrix  
  ;show "Starting to init the connectivity graph from here"
  let G matrix:make-constant 24 24 0
  
  let row-counter 0
  foreach graph [let row item row-counter graph
    let col-counter 0
    foreach row [let col item col-counter row
      matrix:set G row-counter col 1
      set col-counter (col-counter + 1)]
    set row-counter (row-counter + 1)]
  ;show connectivity-matrix
  report G
end  

to-report dijkstra [s d]
  ifelse s = d [show "Desinatoin and start are equal"
    report (list s)] ; if the start and destination are equal
  [ let A setup-graph matrix:copy connectivity-matrix 999999999 1
    
    if d = 0 [ set d s]
    set A exchange-node matrix:copy A 0 s
    
    
    let W matrix:make-constant 24 24 0
    foreach [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23] [
      let value ?
      matrix:set W 0 value value + 1
      matrix:set W 1 value matrix:get A 0 value
    ]
    
    let F matrix:make-constant 24 2 0
    foreach [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23] [
      let value ? 
      matrix:set F value 0 matrix:get A 0 value
      matrix:set F value 1 value + 1
    ]
    
    let F2 matrix:submatrix matrix:copy F 1 0 24 2
    
    let L 2
    
    while [L <= 23][
      
      let number-of-rows item 0 matrix:dimensions F2
      set L ( L + 1 )
      
      foreach n-values 50 [?] [ set F2 sort-rows F2 0 ]; perform sorting algorithm 25 times, to make sure it works correct. Probably a bit overkill    
      let k matrix:get F2 0 1 
      
      matrix:set W (L - 1)  0 k       
      
      set F2 matrix:submatrix F2 1 0 number-of-rows 2
      
      set number-of-rows item 0 matrix:dimensions F2
      
      let iteration-list n-values number-of-rows [?+1]
      
      foreach iteration-list [let value ? 
        let x-coor (matrix:get F2 value 1 - 1)
        if matrix:get F x-coor 0 > (matrix:get F (k - 1) 0 + matrix:get A (k - 1) x-coor  ) [
          matrix:set F x-coor 0 (matrix:get F (k - 1) 0 + matrix:Get A (k - 1) x-coor  )
          matrix:set F2 value 0 matrix:get F x-coor  0 
        ]
      ]
      
      set iteration-list n-values 23 [? + 1]
      ;show iteration-list
      foreach iteration-list [let value ?   
        matrix:set W (L - 1) value matrix:get F value 0
      ]    
    ]
    
    ifelse d = s [ set L (list 1)] [set L (list d) ]
    
    let small-e matrix:get W 23 d         
    set L list-dijkstra L W s d
    report reverse L
  ]
  
end

to-report setup-graph [G b s]
  let bus-stop-list [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
  
  
  if s = 1[
    foreach bus-stop-list[ let row item ? bus-stop-list
      foreach bus-stop-list [let col item ? bus-stop-list
        let value matrix:get G row col
        if value = 0 [matrix:set G row col b]
      ]
    ]
    report G
  ]
  
  if s = 2[
    foreach bus-stop-list[ let row item ? bus-stop-list
      foreach bus-stop-list [let col item ? bus-stop-list
        let value matrix:get G row col
        if value = b [matrix:set G row col 0]
      ]
    ]
    report G
  ]
end

to-report exchange-node [G a b]
  matrix:swap-columns G a b
  matrix:swap-rows G a b
  report G
end

to-report sort-rows [G col]
  let a item 0 matrix:dimensions G
  let b item 1 matrix:dimensions G
  
  set a (a - 1)
  let row-list n-values a [?]
  
  foreach row-list [let row item ? row-list
    let row-plus-one row + 1
    if matrix:get G row-plus-one col < matrix:get G row col [
      matrix:swap-rows G row-plus-one row
    ]
  ] 
  report G
end

to-report list-dijkstra [L W s d]
  let index item 0 matrix:dimensions W
  
  while [ index > 0 ] [
    ifelse matrix:get W 1 (d   )   = matrix:get W 23 (d )  [set L lput s L
      set index 0] [
    let index2 item 0 matrix:dimensions W
    
    while [ index2 > 0 ] [
      ifelse matrix:get W (index2 - 1) (d  ) < matrix:get W (index2 - 2) (d  ) [    
        set L lput (matrix:get W (index2 - 1  ) 0  - 1) L
        set L list-dijkstra L W s (matrix:get W (index2 - 1) 0  - 1)
        set index2 0
      ] [set index2 (index2 - 1)]
      set index 0
    ]
      ]
  ] 
  report L
end