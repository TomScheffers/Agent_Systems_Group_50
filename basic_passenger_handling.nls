to bus-actions
  
  if informed = true [
    drop-passengers
    pick-up-drop-same-station
    pickup-passengers
    move-to-next
  ]
  
end

to pickup-passengers
  ;pick up passengers en route
  let stop-passengers get-passengers-at-stop current_stop
  
  foreach stop-passengers[
    let pick-up 0
    let id item 0 ?
    let goal item 1 ?
    ; show id
    ; show goal
    ifelse member? goal next-stops and free-space > 0[     ;This checks if the goal is en route
      pick-up-passenger id
      set free-space (free-space - 1)
      
    ][
    let shortest-route get-shortest-route current_stop goal ;If the goal is not in next-stops, we check if any of the stops of the shortest route is on our route
    let order []
    foreach but-last shortest-route[
      let short-route-id ?
      foreach next-stops[
        let next-stop-id ?
        if short-route-id = next-stop-id[
          set order []
          set pick-up 1
          set order lput id order
          set order lput next-stop-id order
        ]
      ]
    ]
    if pick-up = 0 and free-space > 0[
      ;Here we want to pick up passengers which are off-route, have no stops on the shortest route, but gain from riding the bus
      ;First we determine cumulative travelling distance over our route, then we look for each stop how much we gain where Gain = (old_distance - new_distance)/distance to stop
      let last-stop current_stop
      let cumulative-distance 0
      let old-distance (get-distance-indirect current_stop goal) ;This is direct distance to goal which is the absolute minimum
      ;write "The route is " show next-stops
      ;write "Old distance was:" show old-distance
      
      let max-gain 0.5
      foreach next-stops[
        let next-stop-id ?
        let dist (get-distance last-stop next-stop-id)
        set cumulative-distance (cumulative-distance + dist)
        ;write "Cumulative distance in the route is:" show cumulative-distance
        set last-stop next-stop-id
        
        let new-distance (get-distance-indirect next-stop-id goal)
        ;write "New distance will be:" show new-distance
        let gain (old-distance - new-distance) / cumulative-distance
        ;write "Gain is:" show gain
        
        if gain > max-gain[
          set max-gain gain
          set order []
          set pick-up 1
          set order lput id order
          set order lput next-stop-id order
        ]
      ] 
    ]
    if pick-up = 1 and free-space > 0[
      set passenger-orders lput order passenger-orders
      pick-up-passenger id
      set free-space (free-space - 1)
      ;write "Picked up passenger with a goal not route with id:"
      ;show id
    ]
    ]
  ]
  ;show passenger-orders
end

to drop-passengers
  foreach bus_passengers[
    let id item 0 ?
    let goal item 1 ?
    if goal = current_stop [
      drop-off-passenger id
      set free-space (free-space + 1)
    ]
  ]
  let idx 0
  foreach passenger-orders[
    let id item 0 ?
    let goal item 1 ?
    ifelse goal = current_stop[
      ;write "Dropped off passenger with ID:"
      ;show id
      drop-off-passenger id
      set free-space (free-space + 1)
      set passenger-orders remove-item idx passenger-orders
    ][
    set idx idx + 1
    ]
  ]
  ;show passenger-orders
end

to move-to-next
  if length next-stops > 0 
    [travel-to item 0 next-stops]
  
end

to pick-up-drop-same-station
  let stop-passengers get-passengers-at-stop current_stop
  if free-space > 0 [
    foreach stop-passengers[
      let id item 0 ?
      let goal item 1 ?
      if goal = current_stop[     ;This checks if the goal is same as current station
        pick-up-passenger id
        drop-off-passenger id
      ]
    ]  
  ]
end

to-report get-distance-indirect [bs1 bs2] ;Here we can get distance between not connected stops
  let shortest-route (get-shortest-route bs1 bs2)
  ;write "Shortest-route" show shortest-route
  ;write "start point is"show bs1
  ;write "end point is" show bs2
  let return 0
  let last-stop -1
  foreach shortest-route[
    let next-stop-id ?
    ifelse last-stop = -1[
      set last-stop next-stop-id
      ][
      ;write "Getting distance from/to:" show last-stop show next-stop-id
      let dist (get-distance last-stop next-stop-id)
      set return (return + dist)
      set last-stop next-stop-id
      ]
    ]
  report return
end