to communication-protocol
  
  process-inbox
  
  ; Use either of these two methods to spawn new buses:
  ; spawn-new-bus?
  
  if bus_id = 24 [create-new-capacity]
  
  
  ; This is a dedicated placeholder for buses that have no instructions yet
  if informed = false [
    ; show "Requesting information..."
    request-info
  ]

end

to report-status

  let id 0
  
  foreach (list other buses) [
    ask ? [set id bus_id]
    
    if id != 0 [ 
      
      ; Enter the things you want to report on here:
      let message ["status"]
      let content []
      set content lput free-space content
      set content lput previous_stop content
      set content lput next-stops content
      set message lput content message
      
      send-message id message
      
    ]
  ]
  
end

to spawn-bus [b_type]
  
  ; call this function if a bus thinks it needs to spawn a bus.
  ; Immediately pass the bus' dijkstra graph knowledge to the newly created bus.
  set spawner b_type
  add-bus b_type

end

to process-inbox
  
  let vote_list []
  
  foreach inbox [
    let message ?
    
    let message_type (item 0 item 2 message)
        
    if message_type = "requesting_info" [
      ; Create a list of instructions for the newborn. 
      
      let reply ["sending_info"]
      let content []
      
      set content lput dijkstra_lookup content
      set content lput connectivity-matrix content
      set content lput route-type content
      set content lput next_stop content
      ; set content lput 10 content

      ; set content lput your_content content
      set reply lput content reply

      ; send the message to spawnee
      send-message (item 1 message) reply

      ; Spawning done and passing information completed

    ]
    
    
    if message_type = "sending_info" [
      
      let content (item 1 item 2 message)
      
      set dijkstra_lookup (item 0 content)
      set connectivity-matrix (item 1 content)
      set route-type (item 2 content)

      ; set route-length (item 3 content)

      ; Also store the direction when you need to be!

      set informed true
    ]


    if message_type = "requesting_vote_spawn" [
      
      let reply ["sending_vote"]
      let content []
      set content lput decide-spawn-type content
      set reply lput content reply
      
      send-message (item 1 message) reply
    ]
    
    
    if message_type = "sending_vote" [
      ; this is the vote that was received:
      set vote_list lput (item 0 item 1 item 2 message) vote_list
    ]

  ]

  if spawn_request > 0 and length vote_list > 0 [
    let popular_vote max (modes vote_list) ; modes returns a list, with possible more than 1 elements (when there are ties, pick largest)
    if popular_vote != 0 [
      spawn-bus popular_vote
    ]
    set spawn_request 0
  ]
  
  clear-inbox

end



to request-info
  
  ; This method is called by a newborn only and sends a message to its parent requesting for information.
  
  let id 0
  foreach (list other buses) [
    ask ? [
      if spawner > 0 [set id bus_id stop]
    ]
  ]
  
  if id != 0 [
    send-message id ["requesting_info" [0]]
  ]
  
end


to-report decide-spawn-type
  
  let prospect 0 ; the number of passengers that will be picked up
  
  if free-space > (0.20 * capacity) [
    report 0
  ]
  
  ; look at how the capacity is going to grow over the next stops
  foreach next-stops [
    let _stop ?
    let _passengers (get-passengers-at-stop _stop) 
    foreach _passengers [ 
      let _passenger ?
      if member? (item 1 _passenger) next-stops [
        set prospect (prospect + 1)
      ]
    ]
    
  ]

  ; set prospect (prospect * 0.25)

  if prospect >= 150 [
    report 3
  ]
  if prospect < 150 and prospect >= 60 [
    report 2
  ]
  
  if prospect < 60 and prospect >= 12 [
    report 1
  ]
  
  if prospect < 12 [
    report 0
  ]
  
end

to spawn-new-bus?
  if spawner = 0 and spawn_request = 0 [ 
    ; Don't check again if there is already a spawn_request pending
    
    ; if we are above 80% of the bus' capacity
    set spawn_request decide-spawn-type ; finds the type of the bus that we want to spawn
    
    if spawn_request != 0 [
      
      let bus_list other buses in-radius 10
      
      ifelse any? bus_list [

        foreach (list bus_list) [
          let id 0
          ask ? [set id bus_id]
          send-message id ["requesting_vote_spawn" [0]]
        ]
        
      ] [

      spawn-bus spawn_request
      set spawn_request 0
      
      ]
      
    ]  
  ]
end

to clear-inbox
  set inbox []
end